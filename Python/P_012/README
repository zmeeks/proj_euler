*********************************
* Project Euler; P_0012: README *
*********************************
* Zack M *

Problem statement:
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

programming language used here: Python 2.7

Note: my first implementation can be seen in the file p_0012_a.py
however, it should be noted that it is unbearably slow.  To verify my solution I rewrote it in the obvious C-code translation, which was still ridiculously slow (about an hour of number crunching).  After I verified the correctness of the solution I looked into optimizations.  There are three number-theoretic tricks that I needed to implement to get a satisfactory solution. Originally I was searching for all numbers against the triangle number to find the number of divisors. That solution line prevented me from making use of the sparsity of primes.  There is a mapping between total number of divisors and number of prime divisors allowing for multiple divisions by the same prime, which allows me to skip the majority of numbers and only look at the prime divisors of the triangle numbers.  Also, prime numbers above three only occur at 6k +- 1. Lastly, since the only divisor above the square root of the number is the number itself, which is accounted for in the mapping of prime factors, we needn’t find primes above the square root of the current triangle number. Together, these optimizations bring my running time down to less than 10 seconds (in Python!)

type 'make run' to run fast (updated) code code
type ‘make slow’ to run original slow code
