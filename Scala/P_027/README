*********************************
* Project Euler; P_0027: README *
*********************************
* Zack M *

Problem statement:
Euler discovered the remarkable quadratic formula:

n2+n+41n2+n+41
It turns out that the formula will produce 40 primes for the consecutive integer values 0≤n≤39. However, when n=40, 40^2+40+41=40(40+1)+41 is divisible by 41, and certainly when n=41,41^2+41+41 is clearly divisible by 41.

The incredible formula n^2−79n+1601 was discovered, which produces 80 primes for the consecutive values 0≤n≤790≤n≤79. The product of the coefficients, −79 and 1601, is −126479.

Considering quadratics of the form:

n^2+a*n+b, where |a|<1000 and |b|≤1000

where |n||n| is the modulus/absolute value of n*n
e.g. |11|=11 and |−4|=4
Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n*n, starting with n=0.

programming language used here: Scala

Note:
I probably used more optimization techniques than necessary. In particular, I used an Array to hold the first 1000 prime numbers and an ArrayBuffer to hold any prime numbers not encountered in the first 1000.  On further reflection the search for the first 1000 primes is surely overkill, but I don’t know how I would have known that for sure analytically. I figured that the first 1000 primes wouldn’t be too computationally time-consuming to find and after that the length of the ArrayBuffer shouldn’t be an issue.

if you have the necessary scala compiler, then type 'make’ to run code
